# Learn Git
The purpose of this repository is to teach the basics of Git. We'll cover:
Learn a little bit about git and why we use it @ [The Git Parable](http://tom.preston-werner.com/2009/05/19/the-git-parable.html)

And the core of our branching model comes from [The Gitflow](https://datasift.github.io/gitflow/IntroducingGitFlow.html)

##### Git Setup
Setup your origin. **USE SSH**

```
git clone git@github.com:BustrInc/bustr.git
cd bustr
ls # show all the files
```

##### Branch Naming

All branches for tracking should end in a ticket number. This ticket is "3873" - if making a change related to this ticket, name the branch "your-change-name-3873". Publishing scripts and humans can match any branch by this number to the issue it belongs.

##### Git Commands
You should typically only ever need a few commands, mostly just: "new branch ", and "push".

If you are merging or forcing anything - you may be doing something wrong. **Ask**.
Rebasing is fun at times - but if you are unsure about any of it, **Ask**.

###  New Branch & Editing (aka: work) 

All your branches should co-relate to a ticket. Otherwise why are you doing it.
If you have an idea and want to work on it, at least file a ticket first.
Ideally go with the team priorities as laid out in [Active Work](https://github.com/orgs/BustrInc/projects/2).

##### New Branch

Refresh your copy of production

```
git checkout production
git pull origin production
git reset --hard origin/production
```

Then - using your ticket #### - create a new branch:

```
git checkout -b branch-name-based-on-ticket-####
```

Then you're good to start making changes!

##### Checking the branch status

At any point, you can list what changes you have made by running:
```
git status
```
Files in red have not been saved yet. Files in green have been `git add`, but not fully saved/committed (see below)

##### Commit (saving your work)

After making some changes, start a commit by adding files you want to save:

```
# Use according to need - and what's open - from `git status`

git add {each file you care about} # explicit selection of files
git add --all .                    # to add all outstanding changes to the pending commit
```

Then commit (save) them:
```
git commit -m "<brief description of your changes>"
```

Push your work to github often to back it up:
```
git push origin branch-name-based-on-ticket-####
```

Post a pull request to let others comment and review your work as you make progress:
```
rake release:review 
```

(or do it manually in github - add code-review label to the PR and to the issue it belongs to)

### Reverting mistakes
Often you'll need to revert an entire file of changes back to what it was previously. If the file hasn't been committed yet:
```
git checkout <path to file>
```

If the file has been added (ie. `git add`):
```
git reset <path to file>
git checkout <path to file>
```